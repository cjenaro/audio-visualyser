{"version":3,"sources":["sound.js"],"names":["WIDTH","HEIGHT","canvas","document","querySelector","ctx","getContext","analyser","bufferLength","getAudio","stream","navigator","mediaDevices","getUserMedia","audio","catch","e","console","log","audioCtx","AudioContext","createAnalyser","createMediaStreamSource","connect","fftSize","frequencyBinCount","timeData","Uint8Array","frequencyData","drawTimeData","drawFrequencyData","getByteTimeDomainData","clearRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","forEach","data","i","v","y","moveTo","lineTo","stroke","requestAnimationFrame","getByteFrequencyData","barWidth","amount","percent","barHeight","fillStyle","fillRect","width","height"],"mappings":";AAAA,MAAMA,EAAQ,KACRC,EAAS,KACTC,EAASC,SAASC,cAAc,UAChCC,EAAMH,EAAOI,WAAW,MAG9B,IAAIC,EACAC,EAEJ,eAAeC,IACPC,MAAAA,QAAeC,UAAUC,aAC5BC,aAAa,CAAEC,OAAO,IACtBC,MAAMC,GAAKC,QAAQC,IAAI,mDACpBC,EAAW,IAAIC,aACrBb,EAAWY,EAASE,iBACRF,EAASG,wBAAwBZ,GACzCa,QAAQhB,GAEZA,EAASiB,QAAU,KAEnBhB,EAAeD,EAASkB,kBAClBC,MAAAA,EAAW,IAAIC,WAAWnB,GAC1BoB,EAAgB,IAAID,WAAWnB,GACrCqB,EAAaH,GACbI,EAAkBF,GAGpB,SAASC,EAAaH,GACpBnB,EAASwB,sBAAsBL,GAE/BrB,EAAI2B,UAAU,EAAG,EAAGhC,EAAOC,GAE3BI,EAAI4B,UAAY,GAChB5B,EAAI6B,YAAc,UAClB7B,EAAI8B,YACEC,MAAAA,EAAapC,EAAQQ,EACvB6B,IAAAA,EAAI,EACRX,EAASY,QAAQ,CAACC,EAAMC,KAChBC,MACAC,EADIH,EAAO,IACFtC,EAAU,EAChB,GAALuC,EACFnC,EAAIsC,OAAON,EAAGK,GAEdrC,EAAIuC,OAAOP,EAAGK,GAGhBL,GAAKD,IAGP/B,EAAIwC,SAEJC,sBAAsB,IAAMjB,EAAaH,IAG3C,SAASI,EAAkBF,GACzBrB,EAASwC,qBAAqBnB,GACxBoB,MAAAA,EAAWhD,EAAQQ,EAAe,IAEpC6B,IAAAA,EAAI,EACRT,EAAcU,QAAQW,IACdC,MACAC,EAAYlD,EAAO,GADTgD,EAAS,KAEzB5C,EAAI+C,UAAY,UAChB/C,EAAIgD,SAAShB,EAAGpC,EAASkD,EAAWH,EAAUG,GAC9Cd,GAAKW,EAAW,IAIlBF,sBAAsB,IAAMhB,EAAkBF,IAhEhD1B,EAAOoD,MAAQtD,EACfE,EAAOqD,OAAStD,EAkEhBQ","file":"sound.0b095534.js","sourceRoot":"..","sourcesContent":["const WIDTH = 1500\nconst HEIGHT = 1500\nconst canvas = document.querySelector('canvas')\nconst ctx = canvas.getContext('2d')\ncanvas.width = WIDTH\ncanvas.height = HEIGHT\nlet analyser\nlet bufferLength\n\nasync function getAudio() {\n  const stream = await navigator.mediaDevices\n    .getUserMedia({ audio: true })\n    .catch(e => console.log('You need to allow permission to the microphone'))\n  const audioCtx = new AudioContext()\n  analyser = audioCtx.createAnalyser()\n  const src = audioCtx.createMediaStreamSource(stream)\n  src.connect(analyser)\n\n  analyser.fftSize = 2 ** 10\n\n  bufferLength = analyser.frequencyBinCount\n  const timeData = new Uint8Array(bufferLength)\n  const frequencyData = new Uint8Array(bufferLength)\n  drawTimeData(timeData)\n  drawFrequencyData(frequencyData)\n}\n\nfunction drawTimeData(timeData) {\n  analyser.getByteTimeDomainData(timeData)\n\n  ctx.clearRect(0, 0, WIDTH, HEIGHT)\n\n  ctx.lineWidth = 10\n  ctx.strokeStyle = '#ff5555'\n  ctx.beginPath()\n  const sliceWidth = WIDTH / bufferLength\n  let x = 0\n  timeData.forEach((data, i) => {\n    const v = data / 128\n    const y = (v * HEIGHT) / 2\n    if (i == 0) {\n      ctx.moveTo(x, y)\n    } else {\n      ctx.lineTo(x, y)\n    }\n\n    x += sliceWidth\n  })\n\n  ctx.stroke()\n\n  requestAnimationFrame(() => drawTimeData(timeData))\n}\n\nfunction drawFrequencyData(frequencyData) {\n  analyser.getByteFrequencyData(frequencyData)\n  const barWidth = WIDTH / bufferLength * 2.5\n\n  let x = 0\n  frequencyData.forEach(amount => {\n    const percent = amount / 255\n    const barHeight = HEIGHT/2 * percent\n    ctx.fillStyle = '#ff5555'\n    ctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight)\n    x += barWidth + 1 \n  })\n\n\n  requestAnimationFrame(() => drawFrequencyData(frequencyData))\n}\n\ngetAudio()\n"]}